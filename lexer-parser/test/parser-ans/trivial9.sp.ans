(program (class_definition_list (class_definition (class_head class Main) { (member_list (member (method_definition (declaration_specifier (type_specifier Int)) main ( ) (compound_statement { (statement_list (statement_list (statement_list (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator i)) ;)) (statement (iteration_statement for ( (for_initializer (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression i))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0))))))))))))))) ; (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i)))))) < (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 10))))))))))))) ; (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression i))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 1)))))))))))))) ) (compound_statement { (statement_list (statement_list (statement (selection_statement if ( (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i))))))) == (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5))))))))))))) ) (compound_statement { (statement_list (statement (jump_statement break) ;)) })))) (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "Printed"))) . put) ( ))))))))))))) ;)) })))) (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))) ;)) })))) } ;)))
