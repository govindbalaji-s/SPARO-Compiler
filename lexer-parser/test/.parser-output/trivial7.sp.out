(program (class_definition_list (class_definition_list (class_definition (class_head class Base) { (member_list (member_list (member_list (member_list (member_list (member_list (member_list (member (member_declaration (declaration_specifier (type_specifier Int)) x) ;)) (member (member_declaration (declaration_specifier (type_specifier Int)) y) ;)) (member (constructor construct ( (parameter_declaration_list (parameter_declaration (declaration_specifier (type_specifier Int)) a)) ) after ( ) (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression x))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression a)))))))))))))) ;)) })))) (member (constructor construct ( (parameter_declaration_list (parameter_declaration_list (parameter_declaration (declaration_specifier (type_specifier Int)) a)) , (parameter_declaration (declaration_specifier (type_specifier Int)) b)) ) after ( ) (compound_statement { (statement_list (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression x))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression a)))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression y))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression b)))))))))))))) ;)) })))) (member (method_definition (declaration_specifier (type_specifier Int)) sum ( (parameter_declaration_list (parameter_declaration_list (parameter_declaration (declaration_specifier (type_specifier Int)) x)) , (parameter_declaration (declaration_specifier (type_specifier Int)) y)) ) (compound_statement { (statement_list (statement_list (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator result = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression x))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression y)))))))))))))) ;)) (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression result))))))))))))) ;)) })))) (member (method_definition (declaration_specifier (type_specifier Int)) sum ( (parameter_declaration_list (parameter_declaration_list (parameter_declaration_list (parameter_declaration (declaration_specifier (type_specifier Int)) x)) , (parameter_declaration (declaration_specifier (type_specifier Int)) y)) , (parameter_declaration (declaration_specifier (type_specifier Int)) z)) ) (compound_statement { (statement_list (statement_list (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator result = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression x))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression y))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression z)))))))))))))) ;)) (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression result))))))))))))) ;)) })))) (member (method_definition (declaration_specifier (type_specifier Float)) sum ( (parameter_declaration_list (parameter_declaration_list (parameter_declaration (declaration_specifier (type_specifier Float)) x)) , (parameter_declaration (declaration_specifier (type_specifier Float)) y)) ) (compound_statement { (statement_list (statement_list (statement (declaration (declaration_specifier (type_specifier Float)) (init_declarator result = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression x))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression y)))))))))))))) ;)) (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression result))))))))))))) ;)) })))) } ;)) (class_definition (class_head class Main) { (member_list (member (method_definition (declaration_specifier (type_specifier Int)) main ( ) (compound_statement { (statement_list (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))) ;)) })))) } ;)))
