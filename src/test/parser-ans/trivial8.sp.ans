(program (class_definition_list (class_definition (class_head class Main) { (member_list (member (method_definition (declaration_specifier (type_specifier Int)) main ( ) (compound_statement { (statement_list (statement_list (statement_list (statement_list (statement (declaration (declaration_specifier (type_specifier Float)) (init_declarator a = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5.4))))))))))))))) ;)) (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator b = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 40))))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression ( (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant "This will be printed"))))))))))))) ))) . put) ( ))))))))))))) ;)) (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))) ;)) })))) } ;)))
