(program (class_definition_list (class_definition (class_head class Main) { (member_list (member (method_definition (declaration_specifier (type_specifier Int)) main ( ) (compound_statement { (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator a = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 20))))))))))))))) ;)) (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator b = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 10))))))))))))))) ;)) (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator c = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 15))))))))))))))) ;)) (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator d = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5))))))))))))))) ;)) (statement (declaration (declaration_specifier (type_specifier Int)) (init_declarator e)) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression e))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression a))))) - (multiplicative_expression (unary_expression (secondary_expression (primary_expression c))))) + (multiplicative_expression (multiplicative_expression (multiplicative_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression b)))) * (unary_expression (secondary_expression (primary_expression c)))) / (unary_expression (secondary_expression (primary_expression a)))) % (unary_expression (secondary_expression (primary_expression d)))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression d))) = (assignment_expression (unary_expression (secondary_expression (primary_expression c))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression e))))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "Value of e = "))) . put) ( ))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression e)) . put) ( ))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "\n"))) . put) ( ))))))))))))) ;)) (statement (selection_statement if ( (expression (slice_expression (assignment_expression (logical_OR_expression (logical_OR_expression (logical_AND_expression (logical_AND_expression (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (unary_operator not) (unary_expression (secondary_expression (primary_expression a))))))) > (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression b)))))))) and (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression c)))))) <= (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression d))))))))) or (logical_AND_expression (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression c)))))) > (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression b)))))))))))) ) (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "True"))) . put) ( ))))))))))))) ;)) }) else (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "False"))) . put) ( ))))))))))))) ;)) })))) (statement (selection_statement if ( (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (relational_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression d)))))) > (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression c)))))) > (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression b)))))) > (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression a)))))))))))) ) (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "TRUE"))) . put) ( ))))))))))))) ;)) }) else (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression (constant "FALSE"))) . put) ( ))))))))))))) ;)) })))) (statement (jump_statement return (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))) ;)) })))) } ;)))
