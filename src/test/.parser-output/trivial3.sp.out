(program (class_definition_list (class_definition (class_head class Main) { (member_list (member_list (member (member_declaration (declaration_specifier (type_specifier (tensor_specifier Tensor < (integer_constant_list (integer_constant_list (integer_constant_list 5) , 5) , 3) >))) test) ;)) (member (method_definition (declaration_specifier (type_specifier Int)) main ( ) (compound_statement { (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression test)) . initialize) ( (expression_list (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0.0)))))))))))))) ))))))))))))) ;)) (statement (declaration (declaration_specifier (type_specifier (tensor_specifier Tensor < (integer_constant_list (integer_constant_list 5) , 5) >))) (init_declarator a)) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression a))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (new_expression (new_keyword new_shared) (type_specifier (tensor_specifier Tensor < (integer_constant_list (integer_constant_list 5) , 5) >)) ( )))))))))))))) ;)) (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression a)) . initialize) ( (expression_list (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 1.0)))))))))))))) ))))))))))))) ;)) (statement (iteration_statement for ( (for_initializer (declaration (declaration_specifier (type_specifier Int)) (init_declarator i = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))))) ; (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i)))))) < (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5))))))))))))) ; (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression i))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 1)))))))))))))) ) (compound_statement { (statement_list (statement (iteration_statement for ( (for_initializer (declaration (declaration_specifier (type_specifier Int)) (init_declarator j = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))))) ; (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression j)))))) < (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5))))))))))))) ; (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression j))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression j))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 1)))))))))))))) ) (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (secondary_expression (primary_expression a)) [ (expression_list (expression_list (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i))))))))))))) , (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression j))))))))))))) ])) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (primary_expression a)) [ (expression_list (expression_list (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i))))))))))))) , (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression j))))))))))))) ]))) * (unary_expression (secondary_expression (primary_expression (constant 10.0))))))))))))))) ;)) })))) })))) (statement (expression_statement (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression a))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression a)))) * (unary_expression (secondary_expression (primary_expression ( (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (new_expression (new_keyword new_unique) (type_specifier (tensor_specifier Tensor < (integer_constant_list (integer_constant_list 5) , 5) >)) ( (expression_list (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 10.0)))))))))))))) )))))))))))) ))))))))))))))) ;)) (statement (iteration_statement for ( (for_initializer (declaration (declaration_specifier (type_specifier Int)) (init_declarator i = (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0)))))))))))))))) ; (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i)))))) < (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 3))))))))))))) ; (expression (slice_expression (assignment_expression (unary_expression (secondary_expression (primary_expression i))) = (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression i))))) + (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 1)))))))))))))) ) (compound_statement { (statement_list (statement (expression_statement (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression ( (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (secondary_expression (secondary_expression (primary_expression test)) . slice) ( (expression_list (expression_list (expression_list (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0))))))))))) : (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5)))))))))))))) , (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0))))))))))) : (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 5)))))))))))))) , (expression (slice_expression (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 0))))))))))) : (assignment_expression (logical_OR_expression (logical_AND_expression (equality_expression (relational_expression (additive_expression (multiplicative_expression (unary_expression (secondary_expression (primary_expression (constant 1)))))))))))))) )))))))))))) ))))) @ (unary_expression (secondary_expression (primary_expression a))))))))))))) ;)) })))) })))) } ;)))
